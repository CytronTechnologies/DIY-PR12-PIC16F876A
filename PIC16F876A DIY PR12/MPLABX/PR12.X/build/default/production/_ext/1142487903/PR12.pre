
# 1 "../../Source file/PR12.c"

# 19 "C:\Program Files\HI-TECH Software\PICC\9.80\include\pic168xa.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char PORTC @ 0x07;

# 31
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;
volatile unsigned char PIR2 @ 0x0D;
volatile unsigned char TMR1L @ 0x0E;
volatile unsigned char TMR1H @ 0x0F;
volatile unsigned char T1CON @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char SSPBUF @ 0x13;
volatile unsigned char SSPCON @ 0x14;
volatile unsigned char CCPR1L @ 0x15;
volatile unsigned char CCPR1H @ 0x16;
volatile unsigned char CCP1CON @ 0x17;
volatile unsigned char RCSTA @ 0x18;
volatile unsigned char TXREG @ 0x19;
volatile unsigned char RCREG @ 0x1A;
volatile unsigned char CCPR2L @ 0x1B;
volatile unsigned char CCPR2H @ 0x1C;
volatile unsigned char CCP2CON @ 0x1D;
volatile unsigned char ADRESH @ 0x1E;
volatile unsigned char ADCON0 @ 0x1F;


volatile unsigned char OPTION @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char TRISC @ 0x87;

# 63
volatile unsigned char PIE1 @ 0x8C;
volatile unsigned char PIE2 @ 0x8D;
volatile unsigned char PCON @ 0x8E;
volatile unsigned char SSPCON2 @ 0x91;
volatile unsigned char PR2 @ 0x92;
volatile unsigned char SSPADD @ 0x93;
volatile unsigned char SSPSTAT @ 0x94;
volatile unsigned char TXSTA @ 0x98;
volatile unsigned char SPBRG @ 0x99;
volatile unsigned char CMCON @ 0x9C;
volatile unsigned char CVRCON @ 0x9D;
volatile unsigned char ADRESL @ 0x9E;
volatile unsigned char ADCON1 @ 0x9F;


volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;


volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;


volatile bit IRP @ (unsigned)&STATUS*8+7;
volatile bit RP1 @ (unsigned)&STATUS*8+6;
volatile bit RP0 @ (unsigned)&STATUS*8+5;
volatile bit TO @ (unsigned)&STATUS*8+4;
volatile bit PD @ (unsigned)&STATUS*8+3;
volatile bit ZERO @ (unsigned)&STATUS*8+2;
volatile bit DC @ (unsigned)&STATUS*8+1;
volatile bit CARRY @ (unsigned)&STATUS*8+0;


volatile bit RA5 @ (unsigned)&PORTA*8+5;
volatile bit RA4 @ (unsigned)&PORTA*8+4;
volatile bit RA3 @ (unsigned)&PORTA*8+3;
volatile bit RA2 @ (unsigned)&PORTA*8+2;
volatile bit RA1 @ (unsigned)&PORTA*8+1;
volatile bit RA0 @ (unsigned)&PORTA*8+0;


volatile bit RB7 @ (unsigned)&PORTB*8+7;
volatile bit RB6 @ (unsigned)&PORTB*8+6;
volatile bit RB5 @ (unsigned)&PORTB*8+5;
volatile bit RB4 @ (unsigned)&PORTB*8+4;
volatile bit RB3 @ (unsigned)&PORTB*8+3;
volatile bit RB2 @ (unsigned)&PORTB*8+2;
volatile bit RB1 @ (unsigned)&PORTB*8+1;
volatile bit RB0 @ (unsigned)&PORTB*8+0;


volatile bit RC7 @ (unsigned)&PORTC*8+7;
volatile bit RC6 @ (unsigned)&PORTC*8+6;
volatile bit RC5 @ (unsigned)&PORTC*8+5;
volatile bit RC4 @ (unsigned)&PORTC*8+4;
volatile bit RC3 @ (unsigned)&PORTC*8+3;
volatile bit RC2 @ (unsigned)&PORTC*8+2;
volatile bit RC1 @ (unsigned)&PORTC*8+1;
volatile bit RC0 @ (unsigned)&PORTC*8+0;

# 145
volatile bit GIE @ (unsigned)&INTCON*8+7;
volatile bit PEIE @ (unsigned)&INTCON*8+6;
volatile bit T0IE @ (unsigned)&INTCON*8+5;
volatile bit INTE @ (unsigned)&INTCON*8+4;
volatile bit RBIE @ (unsigned)&INTCON*8+3;
volatile bit T0IF @ (unsigned)&INTCON*8+2;
volatile bit INTF @ (unsigned)&INTCON*8+1;
volatile bit RBIF @ (unsigned)&INTCON*8+0;

volatile bit TMR0IE @ (unsigned)&INTCON*8+5;
volatile bit TMR0IF @ (unsigned)&INTCON*8+2;

# 161
volatile bit ADIF @ (unsigned)&PIR1*8+6;
volatile bit RCIF @ (unsigned)&PIR1*8+5;
volatile bit TXIF @ (unsigned)&PIR1*8+4;
volatile bit SSPIF @ (unsigned)&PIR1*8+3;
volatile bit CCP1IF @ (unsigned)&PIR1*8+2;
volatile bit TMR2IF @ (unsigned)&PIR1*8+1;
volatile bit TMR1IF @ (unsigned)&PIR1*8+0;


volatile bit CMIF @ (unsigned)&PIR2*8+6;
volatile bit EEIF @ (unsigned)&PIR2*8+4;
volatile bit BCLIF @ (unsigned)&PIR2*8+3;
volatile bit CCP2IF @ (unsigned)&PIR2*8+0;


volatile bit T1CKPS1 @ (unsigned)&T1CON*8+5;
volatile bit T1CKPS0 @ (unsigned)&T1CON*8+4;
volatile bit T1OSCEN @ (unsigned)&T1CON*8+3;
volatile bit T1SYNC @ (unsigned)&T1CON*8+2;
volatile bit TMR1CS @ (unsigned)&T1CON*8+1;
volatile bit TMR1ON @ (unsigned)&T1CON*8+0;


volatile bit TOUTPS3 @ (unsigned)&T2CON*8+6;
volatile bit TOUTPS2 @ (unsigned)&T2CON*8+5;
volatile bit TOUTPS1 @ (unsigned)&T2CON*8+4;
volatile bit TOUTPS0 @ (unsigned)&T2CON*8+3;
volatile bit TMR2ON @ (unsigned)&T2CON*8+2;
volatile bit T2CKPS1 @ (unsigned)&T2CON*8+1;
volatile bit T2CKPS0 @ (unsigned)&T2CON*8+0;


volatile bit WCOL @ (unsigned)&SSPCON*8+7;
volatile bit SSPOV @ (unsigned)&SSPCON*8+6;
volatile bit SSPEN @ (unsigned)&SSPCON*8+5;
volatile bit CKP @ (unsigned)&SSPCON*8+4;
volatile bit SSPM3 @ (unsigned)&SSPCON*8+3;
volatile bit SSPM2 @ (unsigned)&SSPCON*8+2;
volatile bit SSPM1 @ (unsigned)&SSPCON*8+1;
volatile bit SSPM0 @ (unsigned)&SSPCON*8+0;


volatile bit CCP1X @ (unsigned)&CCP1CON*8+5;
volatile bit CCP1Y @ (unsigned)&CCP1CON*8+4;
volatile bit CCP1M3 @ (unsigned)&CCP1CON*8+3;
volatile bit CCP1M2 @ (unsigned)&CCP1CON*8+2;
volatile bit CCP1M1 @ (unsigned)&CCP1CON*8+1;
volatile bit CCP1M0 @ (unsigned)&CCP1CON*8+0;


volatile bit SPEN @ (unsigned)&RCSTA*8+7;
volatile bit RX9 @ (unsigned)&RCSTA*8+6;
volatile bit SREN @ (unsigned)&RCSTA*8+5;
volatile bit CREN @ (unsigned)&RCSTA*8+4;
volatile bit ADDEN @ (unsigned)&RCSTA*8+3;
volatile bit FERR @ (unsigned)&RCSTA*8+2;
volatile bit OERR @ (unsigned)&RCSTA*8+1;
volatile bit RX9D @ (unsigned)&RCSTA*8+0;


volatile bit CCP2X @ (unsigned)&CCP2CON*8+5;
volatile bit CCP2Y @ (unsigned)&CCP2CON*8+4;
volatile bit CCP2M3 @ (unsigned)&CCP2CON*8+3;
volatile bit CCP2M2 @ (unsigned)&CCP2CON*8+2;
volatile bit CCP2M1 @ (unsigned)&CCP2CON*8+1;
volatile bit CCP2M0 @ (unsigned)&CCP2CON*8+0;


volatile bit ADCS1 @ (unsigned)&ADCON0*8+7;
volatile bit ADCS0 @ (unsigned)&ADCON0*8+6;
volatile bit CHS2 @ (unsigned)&ADCON0*8+5;
volatile bit CHS1 @ (unsigned)&ADCON0*8+4;
volatile bit CHS0 @ (unsigned)&ADCON0*8+3;
volatile bit ADGO @ (unsigned)&ADCON0*8+2;

volatile bit GODONE @ (unsigned)&ADCON0*8+2;
volatile bit ADON @ (unsigned)&ADCON0*8+0;


volatile bit RBPU @ (unsigned)&OPTION*8+7;
volatile bit INTEDG @ (unsigned)&OPTION*8+6;
volatile bit T0CS @ (unsigned)&OPTION*8+5;
volatile bit T0SE @ (unsigned)&OPTION*8+4;
volatile bit PSA @ (unsigned)&OPTION*8+3;
volatile bit PS2 @ (unsigned)&OPTION*8+2;
volatile bit PS1 @ (unsigned)&OPTION*8+1;
volatile bit PS0 @ (unsigned)&OPTION*8+0;


volatile bit TRISA5 @ (unsigned)&TRISA*8+5;
volatile bit TRISA4 @ (unsigned)&TRISA*8+4;
volatile bit TRISA3 @ (unsigned)&TRISA*8+3;
volatile bit TRISA2 @ (unsigned)&TRISA*8+2;
volatile bit TRISA1 @ (unsigned)&TRISA*8+1;
volatile bit TRISA0 @ (unsigned)&TRISA*8+0;


volatile bit TRISB7 @ (unsigned)&TRISB*8+7;
volatile bit TRISB6 @ (unsigned)&TRISB*8+6;
volatile bit TRISB5 @ (unsigned)&TRISB*8+5;
volatile bit TRISB4 @ (unsigned)&TRISB*8+4;
volatile bit TRISB3 @ (unsigned)&TRISB*8+3;
volatile bit TRISB2 @ (unsigned)&TRISB*8+2;
volatile bit TRISB1 @ (unsigned)&TRISB*8+1;
volatile bit TRISB0 @ (unsigned)&TRISB*8+0;


volatile bit TRISC7 @ (unsigned)&TRISC*8+7;
volatile bit TRISC6 @ (unsigned)&TRISC*8+6;
volatile bit TRISC5 @ (unsigned)&TRISC*8+5;
volatile bit TRISC4 @ (unsigned)&TRISC*8+4;
volatile bit TRISC3 @ (unsigned)&TRISC*8+3;
volatile bit TRISC2 @ (unsigned)&TRISC*8+2;
volatile bit TRISC1 @ (unsigned)&TRISC*8+1;
volatile bit TRISC0 @ (unsigned)&TRISC*8+0;

# 303
volatile bit ADIE @ (unsigned)&PIE1*8+6;
volatile bit RCIE @ (unsigned)&PIE1*8+5;
volatile bit TXIE @ (unsigned)&PIE1*8+4;
volatile bit SSPIE @ (unsigned)&PIE1*8+3;
volatile bit CCP1IE @ (unsigned)&PIE1*8+2;
volatile bit TMR2IE @ (unsigned)&PIE1*8+1;
volatile bit TMR1IE @ (unsigned)&PIE1*8+0;


volatile bit CMIE @ (unsigned)&PIE2*8+6;
volatile bit EEIE @ (unsigned)&PIE2*8+4;
volatile bit BCLIE @ (unsigned)&PIE2*8+3;
volatile bit CCP2IE @ (unsigned)&PIE2*8+0;


volatile bit POR @ (unsigned)&PCON*8+1;
volatile bit BOR @ (unsigned)&PCON*8+0;


volatile bit GCEN @ (unsigned)&SSPCON2*8+7;
volatile bit ACKSTAT @ (unsigned)&SSPCON2*8+6;
volatile bit ACKDT @ (unsigned)&SSPCON2*8+5;
volatile bit ACKEN @ (unsigned)&SSPCON2*8+4;
volatile bit RCEN @ (unsigned)&SSPCON2*8+3;
volatile bit PEN @ (unsigned)&SSPCON2*8+2;
volatile bit RSEN @ (unsigned)&SSPCON2*8+1;
volatile bit SEN @ (unsigned)&SSPCON2*8+0;


volatile bit SMP @ (unsigned)&SSPSTAT*8+7;
volatile bit CKE @ (unsigned)&SSPSTAT*8+6;
volatile bit DA @ (unsigned)&SSPSTAT*8+5;
volatile bit STOP @ (unsigned)&SSPSTAT*8+4;
volatile bit START @ (unsigned)&SSPSTAT*8+3;
volatile bit RW @ (unsigned)&SSPSTAT*8+2;
volatile bit UA @ (unsigned)&SSPSTAT*8+1;
volatile bit BF @ (unsigned)&SSPSTAT*8+0;

# 352
volatile bit CSRC @ (unsigned)&TXSTA*8+7;
volatile bit TX9 @ (unsigned)&TXSTA*8+6;
volatile bit TXEN @ (unsigned)&TXSTA*8+5;
volatile bit SYNC @ (unsigned)&TXSTA*8+4;
volatile bit BRGH @ (unsigned)&TXSTA*8+2;
volatile bit TRMT @ (unsigned)&TXSTA*8+1;
volatile bit TX9D @ (unsigned)&TXSTA*8+0;


volatile bit C2OUT @ (unsigned)&CMCON*8+7;
volatile bit C1OUT @ (unsigned)&CMCON*8+6;
volatile bit C2INV @ (unsigned)&CMCON*8+5;
volatile bit C1INV @ (unsigned)&CMCON*8+4;
volatile bit CIS @ (unsigned)&CMCON*8+3;
volatile bit CM2 @ (unsigned)&CMCON*8+2;
volatile bit CM1 @ (unsigned)&CMCON*8+1;
volatile bit CM0 @ (unsigned)&CMCON*8+0;


volatile bit CVREN @ (unsigned)&CVRCON*8+7;
volatile bit CVROE @ (unsigned)&CVRCON*8+6;
volatile bit CVRR @ (unsigned)&CVRCON*8+5;
volatile bit CVR3 @ (unsigned)&CVRCON*8+3;
volatile bit CVR2 @ (unsigned)&CVRCON*8+2;
volatile bit CVR1 @ (unsigned)&CVRCON*8+1;
volatile bit CVR0 @ (unsigned)&CVRCON*8+0;


volatile bit ADFM @ (unsigned)&ADCON1*8+7;
volatile bit ADCS2 @ (unsigned)&ADCON1*8+6;
volatile bit PCFG3 @ (unsigned)&ADCON1*8+3;
volatile bit PCFG2 @ (unsigned)&ADCON1*8+2;
volatile bit PCFG1 @ (unsigned)&ADCON1*8+1;
volatile bit PCFG0 @ (unsigned)&ADCON1*8+0;


volatile bit EEPGD @ (unsigned)&EECON1*8+7;
volatile bit WRERR @ (unsigned)&EECON1*8+3;
volatile bit WREN @ (unsigned)&EECON1*8+2;
volatile bit WR @ (unsigned)&EECON1*8+1;
volatile bit RD @ (unsigned)&EECON1*8+0;


# 503 "C:\Program Files\HI-TECH Software\PICC\9.80\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 556
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files\HI-TECH Software\PICC\9.80\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 629 "C:\Program Files\HI-TECH Software\PICC\9.80\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 31 "../../Source file/i2c.h"
extern void i2c_initialize(void);

# 49
extern unsigned char b_i2c_check_error_flag(void);

# 67
extern unsigned char uc_i2c_read(unsigned char uc_slave_address, unsigned char uc_register);

# 86
extern void uc_i2c_write(unsigned char uc_slave_address, unsigned char uc_register, unsigned char uc_data);

# 32 "../../Source file/i2c_rtc.h"
extern void i2c_rtc_initialize(void);

# 49
extern unsigned char uc_i2c_rtc_get_seconds(void);

# 66
extern void i2c_rtc_set_seconds(unsigned char uc_value);

# 83
extern unsigned char uc_i2c_rtc_get_minutes(void);

# 100
extern void i2c_rtc_set_minutes(unsigned char uc_value);

# 117
extern unsigned char uc_i2c_rtc_get_hours(void);

# 134
extern void i2c_rtc_set_hours(unsigned char uc_value);

# 151
extern unsigned char uc_i2c_rtc_get_day(void);

# 168
extern void i2c_rtc_set_day(unsigned char uc_value);

# 185
extern unsigned char uc_i2c_rtc_get_date(void);

# 202
extern void i2c_rtc_set_date(unsigned char uc_value);

# 219
extern unsigned char uc_i2c_rtc_get_month(void);

# 236
extern void i2c_rtc_set_month(unsigned char uc_value);

# 253
extern unsigned char uc_i2c_rtc_get_year(void);

# 270
extern void i2c_rtc_set_year(unsigned char uc_value);

# 22 "../../Source file/PR12.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3F32");

# 43
unsigned char step=0;
unsigned char store=0;
unsigned char clksec=0;
unsigned char clkmin=0;
unsigned char clkhrs=0;
unsigned char day=0;
unsigned char date=0;
unsigned char month=0;
unsigned char year=0;

unsigned char secondh=0;
unsigned char secondl=0;
unsigned char minutesh=0;
unsigned char minutesl=0;
unsigned char hourh=0;
unsigned char hourl=0;
unsigned char dateh=0;
unsigned char datel=0;
unsigned char monthh=0;
unsigned char monthl=0;
unsigned char yearh=0;
unsigned char yearl=0;




void delay(unsigned long data);
void send_config(unsigned char data);
void send_char(unsigned char data);
void e_pulse(void);
void lcd_goto(unsigned char data);
void lcd_clr(void);
void send_string(const char *s);
void send_dec(unsigned long data,unsigned char num_dig);
void writertc(void);
void readrtc(void);




void main(void)
{
i2c_initialize();
i2c_rtc_initialize();
unsigned char i;

ADCON1 = 0b00000110;
TRISA = 0b00000000;
TRISB = 0b00000000;
TRISC = 0b00011111;

RA3=0;
RA2=0;

send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);

readrtc();
}




void writertc(void)
{
RA2=0;
RA3=1;


while(RC0==0)continue;



while(RC0==1)
{
if(RC1==1)
{
lcd_goto(0);
send_dec(clkhrs,2);
delay(10000);
lcd_goto(1);
send_char(' ');
lcd_goto(0);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(clkhrs<=22)clkhrs++;
else clkhrs=0;
}
}

lcd_goto(0);
send_dec(clkhrs,2);
while(RC0==0)continue;




while(RC0==1)
{
if(RC1==1)
{
lcd_goto(3);
send_dec(clkmin,2);
delay(10000);
lcd_goto(4);
send_char(' ');
lcd_goto(3);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(clkmin<=58) clkmin++;
else clkmin=0;
}
}

lcd_goto(3);
send_dec(clkmin,2);
while(RC0==0)continue;




while(RC0==1)
{

if(RC1==1)
{
lcd_goto(6);
send_dec(clksec,2);
delay(10000);
lcd_goto(7);
send_char(' ');
lcd_goto(6);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(clksec<=58) clksec++;
else clksec=0;
}
}

lcd_goto(6);
send_dec(clksec,2);
while(RC0==0)continue;

# 208
while(RC0==1)
{

if(RC1==1)
{
lcd_goto(20);
send_dec(date,2);
delay(10000);
lcd_goto(21);
send_char(' ');
lcd_goto(20);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(date<=30) date++;
else date=1;
}
}

lcd_goto(20);
send_dec(date,2);
while(RC0==0)continue;



while(RC0==1)
{

if(RC1==1)
{
lcd_goto(23);
send_dec(month,2);
delay(10000);
lcd_goto(24);
send_char(' ');
lcd_goto(23);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(month<=11) month++;
else month=1;
}
}

lcd_goto(23);
send_dec(month,2);
while(RC0==0)continue;




while(RC0==1)
{

if(RC1==1)
{
lcd_goto(26);
send_dec(year,2);
delay(10000);
lcd_goto(27);
send_char(' ');
lcd_goto(26);
send_char(' ');
delay(10000);
}
if(RC1==0)
{
while(RC1==0)continue;

if(year<=99) year++;
else year=0;
}
}

lcd_goto(26);
send_dec(year,2);
while(RC0==0)continue;




while(RC0==1)
{
if(RC1==1)
{
if(day==7)
{
lcd_goto(31);
send_string("SUN");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==1)
{
lcd_goto(31);
send_string("MON");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==2)
{
lcd_goto(31);
send_string("TUE");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==3)
{
lcd_goto(31);
send_string("WED");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==4)
{
lcd_goto(31);
send_string("THU");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==5)
{
lcd_goto(31);
send_string("FRI");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==6)
{
lcd_goto(31);
send_string("SAT");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
}
else
{
while(RC1==0)continue;
if(day>6)
{
day=1;
}
else
{
day+=1;
}
}
}
if(RC1==0)
{
if(day==7)
{
lcd_goto(31);
send_string("SUN");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==1)
{
lcd_goto(31);
send_string("MON");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==2)
{
lcd_goto(31);
send_string("TUE");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==3)
{
lcd_goto(31);
send_string("WED");
}
else if(day==4)
{
lcd_goto(31);
send_string("THU");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==5)
{
lcd_goto(31);
send_string("FRI");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
else if(day==6)
{
lcd_goto(31);
send_string("SAT");
delay(10000);
lcd_goto(31);
send_char(' ');
send_char(' ');
send_char(' ');
delay(10000);
}
}
while(RC0==0)continue;

i2c_rtc_set_seconds(clksec);
i2c_rtc_set_minutes(clkmin);
i2c_rtc_set_hours(clkhrs);
i2c_rtc_set_day(day);
i2c_rtc_set_date(date);
i2c_rtc_set_month(month);
i2c_rtc_set_year(year);

}

# 482
void readrtc(void)
{
while(1)
{
RA2=1;
RA3=0;
if(RC0==0)
{
writertc();
}
else
{
clksec=uc_i2c_rtc_get_seconds();
clkmin= uc_i2c_rtc_get_minutes();
clkhrs=uc_i2c_rtc_get_hours();
day=uc_i2c_rtc_get_day();
date=uc_i2c_rtc_get_date();
month=uc_i2c_rtc_get_month();
year=uc_i2c_rtc_get_year();

lcd_goto(0);
send_dec(clkhrs,2);

lcd_goto(2);
send_char(0x3A);

lcd_goto(3);
send_dec(clkmin,2);

lcd_goto(5);
send_char(0x3A);

lcd_goto(6);
send_dec(clksec,2);

if(day==7)
{
lcd_goto(31);
send_string("SUN");
}
else if(day==1)
{
lcd_goto(31);
send_string("MON");
}
else if(day==2)
{
lcd_goto(31);
send_string("TUE");
}
else if(day==3)
{
lcd_goto(31);
send_string("WED");
}
else if(day==4)
{
lcd_goto(31);
send_string("THU");
}
else if(day==5)
{
lcd_goto(31);
send_string("FRI");
}
else if(day==6)
{
lcd_goto(31);
send_string("SAT");
}

lcd_goto(20);
send_dec(date,2);

lcd_goto(22);
send_char(0x2F);


lcd_goto(23);
send_dec(month,2);

lcd_goto(25);
send_char(0x2F);

lcd_goto(26);
send_dec(year,2);

}
}
}




void delay(unsigned long data)
{
for( ;data>0;data-=1);
}
void send_config(unsigned char data)
{
RA0=0;
PORTB=data;
delay(300);
e_pulse();
}
void send_char(unsigned char data)
{
RA0=1;
PORTB=data;
delay(300);
e_pulse();
}
void e_pulse(void)
{
RA1=1;
delay(300);
RA1=0;
delay(300);
}
void lcd_goto(unsigned char data)
{
if(data<16)
{
send_config(0x80+data);
}
else
{
data=data-20;
send_config(0xc0+data);
}
}
void lcd_clr(void)
{
send_config(0x01);
delay(350);
}
void send_string(const char *s)
{
unsigned char i=0;
while (s && *s)send_char (*s++);
}
void send_dec(unsigned long data,unsigned char num_dig)
{

if(num_dig>=10)
{
data=data%10000000000;
send_char(data/1000000000+0x30);
}
if(num_dig>=9)
{
data=data%1000000000;
send_char(data/100000000+0x30);
}
if(num_dig>=8)
{
data=data%100000000;
send_char(data/10000000+0x30);
}
if(num_dig>=7)
{
data=data%10000000;
send_char(data/1000000+0x30);
}
if(num_dig>=6)
{
data=data%1000000;
send_char(data/100000+0x30);
}
if(num_dig>=5)
{
data=data%100000;
send_char(data/10000+0x30);
}
if(num_dig>=4)
{
data=data%10000;
send_char(data/1000+0x30);
}
if(num_dig>=3)
{
data=data%1000;
send_char(data/100+0x30);
}
if(num_dig>=2)
{
data=data%100;
send_char(data/10+0x30);
}
if(num_dig>=1)
{
data=data%10;
send_char(data+0x30);
}
}

